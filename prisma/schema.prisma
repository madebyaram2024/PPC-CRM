// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  customers          Customer[]
  invoices           Invoice[]
  activities         Activity[]
  workOrders         WorkOrder[]
  workOrderDocuments WorkOrderDocument[]
}

model Company {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phone       String?
  address     String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  customers   Customer[]
  invoices    Invoice[]
  workOrders  WorkOrder[]
}

model Customer {
  id               String   @id @default(cuid())
  // Legacy fields (keeping for backward compatibility)
  name             String
  email            String?
  phone            String?
  address          String?
  // New business fields
  companyName      String?
  companyPhone     String?
  website          String?
  contactName      String?
  directNumber     String?
  contactEmail     String?
  billingAddress   String?
  shippingAddress  String?
  notes            String?
  status           String   @default("prospect") // "customer" or "prospect"
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  invoices  Invoice[]
  activities Activity[]
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String?
  price         Float
  sku           String?  @unique
  category      String?
  isActive      Boolean  @default(true)
  customPrinted Boolean  @default(false) // New field for custom printed products
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  lineItems     LineItem[]
}

model Invoice {
  id          String   @id @default(cuid())
  number      String
  amount      Float
  status      String   @default("pending") // "pending", "paid", "overdue"
  dueDate     DateTime
  createdAt   DateTime @updatedAt
  updatedAt   DateTime @updatedAt
  
  // Relations
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  lineItems   LineItem[]
  activities  Activity[]
  workOrders  WorkOrder[]
}

model WorkOrderDocument {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  path        String
  mimeType    String
  size        Int
  createdAt   DateTime @default(now())
  
  // Relations
  workOrderId String
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}

model LineItem {
  id          String   @id @default(cuid())
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  description String?
  createdAt   DateTime @default(now())
  
  // Relations
  invoiceId   String
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  productId   String?
  product     Product? @relation(fields: [productId], references: [id])
}

model Activity {
  id          String   @id @default(cuid())
  type        String   // "customer_created", "invoice_created", "invoice_paid", etc.
  description String
  createdAt   DateTime @default(now())
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  customerId  String?
  customer    Customer? @relation(fields: [customerId], references: [id])
  invoiceId   String?
  invoice     Invoice?  @relation(fields: [invoiceId], references: [id])
}

model WorkOrder {
  id            String   @id @default(cuid())
  number        String   @unique
  status        String   @default("pending") // "pending", "in_progress", "completed"
  customPrinted Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Status tracking
  printedCompleted    Boolean @default(false)
  printedPhoto        String?
  productionCompleted Boolean @default(false)
  productionPhoto     String?
  shippedCompleted    Boolean @default(false)
  shippedPhoto        String?
  
  // Relations
  invoiceId String?
  invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  // File uploads
  documents WorkOrderDocument[]
}